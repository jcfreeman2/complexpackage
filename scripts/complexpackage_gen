#!/usr/bin/env python3

import click
import json
import os
from rich.console import Console
import sys

from daqconf.core.system import System
from daqconf.core.conf_utils import make_app_command_data
from daqconf.core.metadata import write_metadata_file

console = Console()

# Set moo schema search path
from dunedaq.env import get_moo_model_path
import moo.io
moo.io.default_load_path = get_moo_model_path()

# Load configuration types
import moo.otypes

moo.otypes.load_types('complexpackage/confgen.jsonnet')
import dunedaq.complexpackage.confgen as confgen

# JCF, Sep-11-2022
# See equivalent function ("default_config") in daqconf's config_file.py for more on
# what you can do with this kind of function

def default_config():
    console.log("Creating default complexpackage configuration")
    output_dict = {}
    output_dict["complexpackage"] = confgen.complexpackage()
    return output_dict

def parse_json(dict_to_update, filename):
    console.log(f"Parsing config json file {filename}")
    with open(filename, 'r') as f:
        json_obj = json.load(f)
    for k,v in json_obj.items():
        console.log(f"Updating config section {k} with {v}")
        if k in dict_to_update.keys():
            dict_to_update[k].update(v)

    return dict_to_update

def print_config(complexpackage_config):
    console.log(f"complexpackage_config.base_command_port == {complexpackage_config.base_command_port}")
    console.log(f"complexpackage_config.disable_trace == {complexpackage_config.disable_trace}")
    console.log(f"complexpackage_config.pocket_url == {complexpackage_config.pocket_url}")
    console.log(f"complexpackage_config.use_k8s == {complexpackage_config.use_k8s}")
    console.log(f"complexpackage_config.opmon_impl == {complexpackage_config.opmon_impl}")
    console.log(f"complexpackage_config.ers_impl == {complexpackage_config.ers_impl}")
    console.log(f"complexpackage_config.image == {complexpackage_config.image}")
    console.log(f"complexpackage_config.some_configured_value == {complexpackage_config.some_configured_value}")

def configure(ctx, param, filename):
    ctx.default_map["config_file"] = filename
    if os.path.exists(filename):
        if ".json" in filename:
            ctx.default_map = parse_json(ctx.default_map, filename)
    elif filename != "":
        raise ValueError(f"Configuration file {filename} does not exist!")

CONTEXT_SETTINGS = dict(help_option_names=["-h", "--help"], default_map=default_config())
@click.command(context_settings=CONTEXT_SETTINGS)
@click.option(
    '-c', '--config',
    type         = click.Path(dir_okay=False),
    default      = "",
    callback     = configure,
    is_eager     = True,
    expose_value = False,
    help         = 'Read option defaults from the specified JSON file',
    show_default = True,
)
@click.option('--base-command-port', type=int, default=-1, help="Base port of application command endpoints")
@click.option('--some-configured-value', type=int, default=99999999, help="Some value which gets configured in the DAQModules")
@click.argument("json_dir", type=click.Path())
@click.pass_context
def cli(ctx, base_command_port, some_configured_value, json_dir):

    if os.path.exists(json_dir):
        raise RuntimeError(f"Directory {json_dir} already exists")

    # Get our config objects                                                                                                             
    complexpackage = ctx.default_map["complexpackage"]

    console.log("\nThe configuration before any command line overrides:")
    print_config(complexpackage)

    if base_command_port != -1:
       complexpackage.base_command_port = base_command_port
    if some_configured_value != 99999999:
        complexpackage.some_configured_value = some_configured_value

    console.log("\nThe configuration after accounting for any command line overrides:")
    print_config(complexpackage)

    console.log("\nLoading the complexpackage config generator")
    from complexpackage import complexpackageapp_gen

    the_system = System()

    if complexpackage.opmon_impl == 'cern':
        info_svc_uri = "kafka://monkafka.cern.ch:30092/opmon"
    elif complexpackage.opmon_impl == 'pocket':
        info_svc_uri = "kafka://" + complexpackage.pocket_url + ":31002/opmon"
    else:
        info_svc_uri = "file://info_{APP_NAME}_{APP_PORT}.json"

    ers_settings = dict()

    if complexpackage.ers_impl == "cern":
        use_kafka = True
        ers_settings["INFO"] =    "erstrace,throttle,lstdout,erskafka(monkafka.cern.ch:30092)"
        ers_settings["WARNING"] = "erstrace,throttle,lstdout,erskafka(monkafka.cern.ch:30092)"
        ers_settings["ERROR"] =   "erstrace,throttle,lstdout,erskafka(monkafka.cern.ch:30092)"
        ers_settings["FATAL"] =   "erstrace,lstdout,erskafka(monkafka.cern.ch:30092)"
    elif complexpackage.ers_impl == "pocket":
        use_kafka = True
        ers_settings["INFO"] =    "erstrace,throttle,lstdout,erskafka(" + pocket_url + ":30092)"
        ers_settings["WARNING"] = "erstrace,throttle,lstdout,erskafka(" + pocket_url + ":30092)"
        ers_settings["ERROR"] =   "erstrace,throttle,lstdout,erskafka(" + pocket_url + ":30092)"
        ers_settings["FATAL"] =   "erstrace,lstdout,erskafka(" + pocket_url + ":30092)"
    else:
        use_kafka = False
        ers_settings["INFO"] =    "erstrace,throttle,lstdout"
        ers_settings["WARNING"] = "erstrace,throttle,lstdout"
        ers_settings["ERROR"] =   "erstrace,throttle,lstdout"
        ers_settings["FATAL"] =   "erstrace,lstdout"
    
    the_system.apps["complexpackage_app"] = complexpackageapp_gen.get_complexpackage_app(
        nickname = "the_solo_app", some_configured_value = complexpackage.some_configured_value
    )

    ####################################################################                                  
    # Application command data generation                                                                 
    ####################################################################                                  

    # Arrange per-app command data into the format used by util.write_json_files()    

    app_command_datas = {
        name : make_app_command_data(the_system, app, name)
        for name, app in the_system.apps.items()
    }

    # Make boot.json config                                                                               
    from daqconf.core.conf_utils import make_system_command_datas, generate_boot_common, write_json_files
    system_command_datas = make_system_command_datas(the_system)

    boot = generate_boot_common(
        ers_settings = ers_settings,
        info_svc_uri = info_svc_uri,
        disable_trace = True,
        use_kafka = use_kafka,
        external_connections = [],
        daq_app_exec_name = "daq_application_ssh" if not complexpackage.use_k8s else "daq_application_k8s",
        verbose = False,
    )
    
    if complexpackage.use_k8s:
        from daqconf.core.conf_utils import update_with_k8s_boot_data
        console.log("Generating k8s boot.json")
        update_with_k8s_boot_data(
            boot_data = boot,
            apps = the_system.apps,
            base_command_port = complexpackage.base_command_port,
            boot_order = list(the_system.apps.keys()),
            image = complexpackage.image,
            verbose = False,
        )
    else:
        from daqconf.core.conf_utils import update_with_ssh_boot_data
        console.log("Generating ssh boot.json")
        update_with_ssh_boot_data(
            boot_data = boot,
            apps = the_system.apps,
            base_command_port = complexpackage.base_command_port,
            verbose = False,
        )

    system_command_datas["boot"] = boot

    write_json_files(app_command_datas, system_command_datas, json_dir, verbose=True)

    console.log(f"Package app config generated in {json_dir}")

    write_metadata_file(json_dir, "complexpackage_gen", ctx.default_map["config_file"])

if __name__ == "__main__":
    try:
        cli(show_default=True, standalone_mode=True)
    except Exception:
        console.print_exception()
